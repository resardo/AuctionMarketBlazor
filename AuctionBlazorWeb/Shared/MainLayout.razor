@using AuctionBlazorWeb.Helpers
@using System.Text.Json
@using AuctionBlazorWeb.Models
@using AuctionBlazorWeb.Services
@implements IDisposable

@inject HttpClient Http
@inject WalletService WalletService
@inherits LayoutComponentBase
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager



<div class="container-fluid">
    <div class="row">
        <!-- Sidebar -->
        <div class="col-12 col-sm-4 col-md-3 col-lg-2 d-md-block bg-light sidebar">
            <NavMenu />
            <!-- Authentication and User Info -->
            @if (!string.IsNullOrEmpty(jwtToken)) {
                <div class="px-3 py-2">
                    <p class="text-success">Hi, @userName</p>
                    <p class="text-success">Wallet: @WalletService.WalletBalance</p>
                    <button class="btn btn-outline-success w-100" @onclick="RedirectToLogout">@textValue</button>
                </div>
            } else {
                <div class="px-3 py-2">
                    <button class="btn btn-outline-success w-100" @onclick="RedirectToLogin">@textValue</button>
                </div>
            }
        </div>

        <!-- Page Content -->
        <div class="col-12 col-sm-8 col-md-9 col-lg-10 px-md-4">
            

            <!-- Main Content -->
            <main class="pt-3 h-100">
                <article class="h-100">
                    @Body
                </article>
            </main>
        </div>
    </div>
</div>





@code {
    private string userId;
    private string userName;
    //private decimal wallet;
    private string jwtToken;
    private string textValue="";
    protected override async Task OnInitializedAsync()
    {
        WalletService.OnChange += StateHasChanged;
        NavigationManager.LocationChanged += HandleLocationChanged;
        await CheckAndUpdateAuthenticationState();
    }

    private async Task CheckAndUpdateAuthenticationState()
    {
        jwtToken = await GetTokenAsync();
        if (string.IsNullOrEmpty(jwtToken))
        {
            textValue = "Register";
            StateHasChanged(); // Ensure UI updates if state changes
                               //NavigationManager.NavigateTo("/login");
        }
        else
        {
            GetInfoFromToken(jwtToken);
            var user = await Http.GetFromJsonAsync<UserModel>($"/api/User/{userId}");
            WalletService.UpdateWallet(user.Wallet);
            userName = user.Username;
            textValue = "LogOut";
            StateHasChanged(); // Ensure UI updates if state changes
            //NavigationManager.NavigateTo("/");
        }
    }

    private async Task RedirectToLogout()
    {
        await RemoveTokenAsync();
        jwtToken = null; // Clear the token
        await CheckAndUpdateAuthenticationState(); // Re-check authentication state
        NavigationManager.NavigateTo("/login", forceLoad: true); // Force reload to apply changes
    }

    private void RedirectToLogin()
    {
        NavigationManager.NavigateTo("/register");
    }

    // Existing GetTokenAsync and RemoveTokenAsync methods remain unchanged

    private async void  HandleLocationChanged(object sender, LocationChangedEventArgs e)
    {
        await CheckAndUpdateAuthenticationState(); // Re-check authentication state on navigation
    }
        

    public async Task<string> GetTokenAsync()
    {
        return await JSRuntime.InvokeAsync<string>("localStorageFunctions.getItem", "jwtToken");
        
    }

    public async Task RemoveTokenAsync()
    {
        await JSRuntime.InvokeVoidAsync("localStorageFunctions.removeItem", "jwtToken");
        
    }
    
    private void GetInfoFromToken(string jwtToken)
    {
        var decodedPayload = JwtDecoder.DecodePayload(jwtToken);
        var payloadObj = JsonDocument.Parse(decodedPayload).RootElement;

        if (payloadObj.TryGetProperty("http://schemas.microsoft.com/ws/2008/06/identity/claims/serialnumber", out JsonElement nameElement))
        {
            userId = nameElement.GetString();
        }

    }
    public void Dispose()
        {
            WalletService.OnChange -= StateHasChanged;
            NavigationManager.LocationChanged -= HandleLocationChanged;
        }
}