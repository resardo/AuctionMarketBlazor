@page "/create-auction"
@using System.ComponentModel.DataAnnotations
@using AuctionBlazorWeb.Helpers
@using AuctionBlazorWeb.Models
@using System.Text.Json



@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime


<h3 class="mb-4">Create New Auction</h3>

<EditForm Model="@newAuction" OnValidSubmit="@HandleCreateAuction" class="w-50">
    <DataAnnotationsValidator />
    <ValidationSummary class="text-danger" />

    <div class="form-group mb-3">
        <label for="title" class="form-label">Title</label>
        <InputText id="title" class="form-control" @bind-Value="newAuction.Title" />
    </div>

    <div class="form-group mb-3">
        <label for="description" class="form-label">Description</label>
        <InputTextArea id="description" class="form-control" @bind-Value="newAuction.Description" rows="3" />
    </div>

    <div class="form-group mb-3">
        <label for="startTime" class="form-label">Start Time</label>
        <InputDate id="startTime" class="form-control" @bind-Value="newAuction.StartTime" disabled />
    </div>

    <div class="form-group mb-3">
        <label for="endTime" class="form-label">End Time</label>
        <InputDate id="endTime" class="form-control" @bind-Value="newAuction.EndTime" />
    </div>

    <div class="form-group mb-3">
        <label for="startPrice" class="form-label">Start Price</label>
        <InputNumber id="startPrice" class="form-control" @bind-Value="newAuction.StartPrice" />
    </div>

    <button type="submit" class="btn btn-primary mt-2">Create Auction</button>
</EditForm>

@code {
    private string jwtToken;
    public string userId;
    private AuctionModel newAuction = new AuctionModel()
        {
            StartTime = DateTime.UtcNow,
            EndTime = DateTime.UtcNow.AddDays(1)
        };
    protected override async Task OnInitializedAsync()
    {
        jwtToken = await GetTokenAsync();
        GetInfoFromToken(jwtToken); 
    }
    private async Task HandleCreateAuction()
    {
        newAuction.UserId = Guid.Parse(userId);
        var response = await Http.PostAsJsonAsync("/api/Auction/Register", newAuction);
        if (response.IsSuccessStatusCode)
        {
             NavigationManager.NavigateTo("/");
        }
        else
        {
            // Handle errors
        }
    }

    private void GetInfoFromToken(string jwtToken)
    {
        var decodedPayload = JwtDecoder.DecodePayload(jwtToken);
        var payloadObj = JsonDocument.Parse(decodedPayload).RootElement;

        if (payloadObj.TryGetProperty("http://schemas.microsoft.com/ws/2008/06/identity/claims/serialnumber", out JsonElement nameElement))
        {
            userId = nameElement.GetString();
        }

    }

    public async Task<string> GetTokenAsync()
    {
        return await JSRuntime.InvokeAsync<string>("localStorageFunctions.getItem", "jwtToken");
    }

   
}
