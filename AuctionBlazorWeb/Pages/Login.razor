@page "/login"
@using AuctionBlazorWeb.Helpers
@using AuctionBlazorWeb.Models
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IConfiguration _configuration
@inject IJSRuntime JSRuntime

<div class="d-flex flex-column align-items-center h-50 pt-4">
<h3 class="pb-4">Login</h3>

<EditForm Model="@loginModel" OnValidSubmit="@HandleLogin" class="w-50">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group pb-2">
        <label for="username">Username</label>
        <InputText id="username" class="form-control" @bind-Value="loginModel.Username" />
        <ValidationMessage For="@(() => loginModel.Username)" />
    </div>
    
    <div class="form-group pb-3">
        <label for="password">Password</label>
        <InputText id="password" type="password" class="form-control" @bind-Value="loginModel.Password" />
        <ValidationMessage For="@(() => loginModel.Password)" />
    </div>
    <div class="d-flex flex-row justify-content-center w-100 pt-4 ">
    <button type="submit" class="btn btn-primary ">Login</button>
    </div>
</EditForm>
</div>
@code {
    private LoginModel loginModel = new LoginModel();

    private async Task HandleLogin()
    {
        
        var response = await Http.PostAsJsonAsync("/api/Login/loginAuthentication", loginModel);
        if (response.IsSuccessStatusCode)
        {
            
            var token = await response.Content.ReadAsStringAsync();
            SaveTokenAsync(token);
            
            NavigationManager.NavigateTo("/");
        }
        else
        {
            var response1 = await response.Content.ReadFromJsonAsync<ErrorModel>();
            var alertMessage = $"{response1.Message}";
            await JSRuntime.InvokeVoidAsync("alert", alertMessage);
        }
    }
    public async Task SaveTokenAsync(string token)
    {
        await JSRuntime.InvokeVoidAsync("localStorageFunctions.setItem", "jwtToken", token);
    }
   
}