@page "/"
@using AuctionBlazorWeb.Helpers
@using System.Text.Json
@using AuctionBlazorWeb.Models
@using AuctionBlazorWeb.Services
@implements IDisposable

@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject WalletService WalletService


<h3 class="pb-3 pt-3">Current Auctions</h3>

<button class="btn btn-success" @onclick="CreateNewAuction">Create New Auction</button>

@if (auctions == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Item</th>
                <th>Seller</th>
                <th>TopBid</th>
                <th>Time Remaining</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var auction in auctions)
            {
                <tr>
                    @if(auction.IsAvailable){
                    <td><a href="@($"/auction/{auction.AuctionId}")">@auction.Title</a></td>
                    }
                    else{
                        <td>@auction.Title</td>
                    }
                    <td>@auction.User.Username</td>
                    <td>@highestBids[auction.AuctionId]</td>
                    <td>@(auction.IsAvailable ? $"{(auction.EndTime - DateTime.UtcNow):dd} days {(auction.EndTime - DateTime.UtcNow):hh} hours {(auction.EndTime - DateTime.UtcNow):mm} minutes" : "This auction has ended.")</td>
                    @if (auction.User.Username == userName && auction.IsAvailable)
                    {
                        <td><button class="btn btn-danger" @onclick="(() => DeleteAuction(auction.AuctionId))">Delete Auction</button></td>
                    }
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<AuctionsModel> auctions;
    private Dictionary<Guid, decimal> highestBids = new();
    private Timer _refreshTimer;

    private string jwtToken;
    private string userName;
    private string userId;

    protected override async Task OnInitializedAsync()
    {
        
        jwtToken = await GetTokenAsync();
        if (string.IsNullOrEmpty(jwtToken))
        {
            RedirectToLogin();
        }
        else
        {
            GetInfoFromToken(jwtToken);
        }
        await LoadAuctionsData();
        WalletService.OnChange += StateHasChanged;
        StartRefreshTimer();
    }

    private async Task LoadAuctionsData()
    {
        auctions = await GetAllAuctions();

        foreach (var auction in auctions)
        {
            var highestBidAmount = await GetHighestBid(auction.AuctionId.ToString());
            highestBids[auction.AuctionId] = highestBidAmount == 0m ? auction.StartPrice : highestBidAmount;
        }
        
        var user = await Http.GetFromJsonAsync<UserModel>($"/api/User/{userId}");
        WalletService.UpdateWallet(user.Wallet);
    }

    private async Task<List<AuctionsModel>> GetAllAuctions()
    {
        return await Http.GetFromJsonAsync<List<AuctionsModel>>("/api/Auction/getAllAuctions");
    }

    private void CreateNewAuction()
    {
        NavigationManager.NavigateTo("/create-auction");
    }

    private void RedirectToLogin()
    {
        NavigationManager.NavigateTo("/login");
    }

    private async void DeleteAuction(Guid auctionId)
    {
        var response = await Http.PutAsJsonAsync( "/api/Auction/Delete/" + auctionId.ToString(), new { });
        if (response.IsSuccessStatusCode)
        {
            await LoadAuctionsData();
            StateHasChanged();
        }
    }

    public async Task<decimal> GetHighestBid(string auctionId)
    {
        
        BidModel highestBid = null;
        try
        {
            highestBid = await Http.GetFromJsonAsync<BidModel>("/api/Bid/HighestBid/" + auctionId);
            return highestBid?.Amount ?? 0m; 
        }
        catch
        {
            return 0m;
        }
    }

    public async Task<string> GetTokenAsync()
    {
        return await JSRuntime.InvokeAsync<string>("localStorageFunctions.getItem", "jwtToken");
    }

    private void GetInfoFromToken(string jwtToken)
    {
        var decodedPayload = JwtDecoder.DecodePayload(jwtToken);
        var payloadObj = JsonDocument.Parse(decodedPayload).RootElement;

        if (payloadObj.TryGetProperty("http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name", out JsonElement nameElement))
        {
            userName = nameElement.GetString();
        }
        if (payloadObj.TryGetProperty("http://schemas.microsoft.com/ws/2008/06/identity/claims/serialnumber", out JsonElement idElement))
        {
            userId = idElement.GetString();
        }
    }

    private void StartRefreshTimer()
    {
        _refreshTimer?.Dispose();
        _refreshTimer = new Timer(async _ =>
        {
            await LoadAuctionsData();
            await InvokeAsync(StateHasChanged);
        }, null, TimeSpan.Zero, TimeSpan.FromMinutes(1));
    }

    public void Dispose()
    {
        _refreshTimer?.Dispose();
        WalletService.OnChange -= StateHasChanged;
    }
}
